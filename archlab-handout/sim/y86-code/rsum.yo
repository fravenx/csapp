                            | # Execution begins at address 0 
0x000:                      | 	.pos 0 
0x000: 30f40002000000000000 | 	irmovq stack, %rsp  	# Set up stack pointer  
0x00a: 804800000000000000   | 	call main		# Execute main program
0x013: 00                   | 	halt			# Terminate program 
                            | 
                            | # Sample linked list
0x018:                      | .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     |     .quad 0x00a
0x020: 2800000000000000     |     .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |     .quad 0x0b0
0x030: 3800000000000000     |     .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |     .quad 0xc00
0x040: 0000000000000000     |     .quad 0
                            | 
0x048: 30f71800000000000000 | main:	irmovq ele1,%rdi	
0x052: 805c00000000000000   | 	call rsum		# rsum(*list)
0x05b: 90                   | 	ret
                            | 
                            | /* $begin rsum-ys */
                            | # long rsum(list *l)
                            | # l in %rdi
0x05c:                      | rsum:
0x05c: 6300                 | 	xorq %rax,%rax		# Set return value to 0
0x05e: 2076                 |   rrmovq %rdi,%rsi
0x060: 6266                 | 	andq %rsi,%rsi		# Set condition codes
0x062: 718e00000000000000   | 	jle     return		# If l <= 0, return 0
0x06b: a03f                 | 	pushq %rbx		# Save callee-saved register
0x06d: 50370000000000000000 | 	mrmovq (%rdi),%rbx	# Get *l->val
0x077: 50770800000000000000 | 	mrmovq 8(%rdi), %rdi
0x081: 805c00000000000000   |   call rsum
0x08a: 6030                 | 	addq %rbx,%rax          # Add l->val to sum
0x08c: b03f                 | 	popq %rbx		# Restore callee-saved register
0x08e:                      | return:
0x08e: 90                   | 	ret
                            | /* $end rsum-ys */
                            | 
                            | # The stack starts here and grows to lower addresses
0x200:                      | 	.pos 0x200		
0x200:                      | stack:	 
                            | 
